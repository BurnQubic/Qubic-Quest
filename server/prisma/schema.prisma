// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  username      String        @unique
  email         String        @unique
  password      String
  walletAddress String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  tries         Try[]
  leaderboards  Leaderboard[]
  rewards       Reward[]
  transactions  Transaction[]
  scores        Score[]
}

model GameType {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  puzzles     Puzzle[]
}

model Puzzle {
  id           Int              @id @default(autoincrement())
  name         String
  description  String?
  difficulty   PuzzleDifficulty
  gameTypeId   Int
  gameType     GameType         @relation(fields: [gameTypeId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  tries        Try[]
  leaderboards Leaderboard[]
  scores       Score[]
}

model Score {
  id        Int      @id @default(autoincrement())
  userId    Int
  puzzleId  Int
  score     Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  puzzle Puzzle @relation(fields: [puzzleId], references: [id])

  @@unique([userId, puzzleId])
}

model Try {
  id        Int      @id @default(autoincrement())
  userId    Int
  puzzleId  Int
  tryCount  Int
  success   Boolean
  timeTaken Int
  user      User     @relation(fields: [userId], references: [id])
  puzzle    Puzzle   @relation(fields: [puzzleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Leaderboard {
  id        Int      @id @default(autoincrement())
  userId    Int
  puzzleId  Int
  score     Int
  week      Int
  year      Int
  user      User     @relation(fields: [userId], references: [id])
  puzzle    Puzzle   @relation(fields: [puzzleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, puzzleId, week, year])
}

model Reward {
  id        Int      @id @default(autoincrement())
  userId    Int
  quAmount  Int
  week      Int
  year      Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        Int               @id @default(autoincrement())
  userId    Int
  amount    Float
  txId      String            @unique
  type      TransactionType
  status    TransactionStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  REWARD
  BURN
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PuzzleDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}
